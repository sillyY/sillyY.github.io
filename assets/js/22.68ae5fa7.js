(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{307:function(e,a,t){"use strict";t.r(a);var r=t(9),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"js-冷门语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-冷门语句","aria-hidden":"true"}},[e._v("#")]),e._v(" JS 冷门语句")]),e._v(" "),t("p",[e._v("JS 的语句有很多种，本文重点涉及 "),t("code",[e._v("debugger")]),e._v(","),t("code",[e._v("do...while")]),e._v(", "),t("code",[e._v("while")]),e._v(", "),t("code",[e._v("for await...of")]),e._v(", "),t("code",[e._v("label")]),e._v(", "),t("code",[e._v("throw")]),e._v(" 这6种")]),e._v(" "),t("h2",{attrs:{id:"debugger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debugger","aria-hidden":"true"}},[e._v("#")]),e._v(" debugger")]),e._v(" "),t("p",[e._v("debugger 语句调用任何可用的调试功能，例如设置断点。 如果没有调试功能可用，则此语句不起作用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function triggerDebugger() {\n    debugger\n    // debgugger被调用时，执行会暂停在debugger语句处，通过断点等调试工具来调试后续代码\n}\n")])])]),t("blockquote",[t("p",[e._v("完美取代console调试大法😂")])]),e._v(" "),t("h2",{attrs:{id:"do-while和while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#do-while和while","aria-hidden":"true"}},[e._v("#")]),e._v(" do...while和while")]),e._v(" "),t("h3",{attrs:{id:"do-while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#do-while","aria-hidden":"true"}},[e._v("#")]),e._v(" do...while")]),e._v(" "),t("p",[e._v("do...while 语句创建一个执行指定语句的循环，直到condition值为 false。在执行语句(statement) 后检测condition，所以指定的语句(statement)至少执行一次。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("do  \n    // 语句  \nwhile(condition)\n")])])]),t("h3",{attrs:{id:"while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while","aria-hidden":"true"}},[e._v("#")]),e._v(" while")]),e._v(" "),t("p",[e._v("while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("while(condition)\n    // 语句\n")])])]),t("blockquote",[t("p",[e._v("也许正是for大法好啊，导致这2个语句都似不存于JS中")])]),e._v(" "),t("h2",{attrs:{id:"for-await-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-await-of","aria-hidden":"true"}},[e._v("#")]),e._v(" for await...of")]),e._v(" "),t("p",[e._v("The for await...of 语句在异步或者同步可迭代对象上（包括 String，Array，Array-like 对象（比如arguments 或者NodeList)，TypedArray，Map， Set和其他对象等等）创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for await (variable of iterable) {\n    // 语句\n}\n")])])]),t("h2",{attrs:{id:"label"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#label","aria-hidden":"true"}},[e._v("#")]),e._v(" label")]),e._v(" "),t("p",[e._v("标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符（identifier）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var num = 0;\nloop1:\nfor(var i = 0; i < 3; i++){\n    if(i === 1) {\n        continue loop1;\n    }\n    num++\n}\nconsole.log(num) // 2\n")])])]),t("h2",{attrs:{id:"throw"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#throw","aria-hidden":"true"}},[e._v("#")]),e._v(" throw")]),e._v(" "),t("p",[e._v("throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function useThrow() {\n    throw "Use Throw"\n}\ntry {\n    useThrow()\n}catch(e) {\n    console.log(e) // Use Throw\n}\n')])])]),t("Valine")],1)}),[],!1,null,null,null);a.default=s.exports}}]);