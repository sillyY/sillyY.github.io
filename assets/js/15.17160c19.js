(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{297:function(n,e,t){"use strict";t.r(e);var a=t(9),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-设计模式","aria-hidden":"true"}},[n._v("#")]),n._v(" JavaScript 设计模式")]),n._v(" "),t("p",[n._v("最近在看"),t("code",[n._v("曾探")]),n._v("的《JavaScript 设计模式与开发实践》，从中有所收获。"),t("br"),n._v("\n故在此记录下常用的设计模式，持续更新中...")]),n._v(" "),t("h2",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),t("p",[n._v("常用于创建单一的对象，创建时判断对象是否已存在，如果已存在，则返回当前对象。")]),n._v(" "),t("h3",{attrs:{id:"常用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("登录弹窗")]),n._v(" "),t("li",[n._v("Electron 创建窗口")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"惰性单例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#惰性单例","aria-hidden":"true"}},[n._v("#")]),n._v(" 惰性单例")]),n._v(" "),t("p",[n._v("惰性单例即在需要的时候才创建对象实例。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var getSingle = function(fn) {\n    var result;\n    return function() {\n        return result || result = fn.apply(this, arguments)\n    }\n}\n")])])]),t("p",[n._v("比如：创建单例窗口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var createPopup = function() {\n    // 创建弹窗逻辑\n    ...省略\n}\n\nvar createSinglePopup = getSingle(createPopup)\n\ndocument.getElementById('popup').onclick = function() {\n    var popup = createSinglePopup()\n    popup.style.display = 'block'\n}\n")])])]),t("h2",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 策略模式")]),n._v(" "),t("p",[n._v("定义一系列的算法，把它们一个个封装起来，并且使他们可以相互替换、")]),n._v(" "),t("h3",{attrs:{id:"常用场景-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-2","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("if-else 可读性问题")]),n._v(" "),t("li",[n._v("表单验证问题")]),n._v(" "),t("li",[n._v("奖金计算问题")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var S = function( salary ){     \n    return salary * 4;\n};\nvar A = function( salary ){\n    return salary * 3;\n};\nvar B = function( salary ){\n     return salary * 2;\n};\n\nvar calculateBonus = function( func, salary ){\n     return func( salary );\n};\n\ncalculateBonus( S, 10000  );    // 输出：40000\n")])])]),t("h2",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 代理模式")]),n._v(" "),t("p",[n._v("代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-3","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("虚拟代理(真正需要的时候才取创建)"),t("br"),n._v("\n比如: 图片预加载、HTTP 请求")]),n._v(" "),t("li",[n._v("缓存代理"),t("br"),n._v("\n比如: ajax 请求数据")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-2","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var myImage = (function(){     \n    var imgNode = document.createElement('img');\n    document.body.appendChild(imgNode);\n    return function(src){         \n         imgNode.src = src;     \n    }\n})();\n\nvar proxyImage = (function(){     \n    var img = new Image();     \n    img.onload = function(){         \n        myImage(this.src);     \n    }     \n    return function(src){         \n        myImage('占位图');         \n        img.src = src;     \n    }\n})();\n\nproxyImage('path');\n\n")])])]),t("h2",{attrs:{id:"迭代器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 迭代器模式")]),n._v(" "),t("p",[n._v("迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-4","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("迭代数组和对象")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-3","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var each = function( ary, callback ){     \n    for ( var i = 0, l = ary.length; i < l; i++ ){     \n        callback.call( ary[i], i, ary[ i ] );  // 把下标和元素当作参数传给callback函数\n    }\n};\n\neach( [ 1, 2, 3 ], function( i, n ){\n    alert ( [ i, n ] );\n});\n")])])]),t("h2",{attrs:{id:"发布-订阅模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 发布-订阅模式")]),n._v(" "),t("p",[n._v("发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-5","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("DOM 绑定")]),n._v(" "),t("li",[n._v("订阅功能")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-4","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var event = {\n  clientList: [],\n  listen: function(key, fn) {\n    if (!this.clientList[key]) {\n      this.clientList[key] = []\n    }\n    this.clientList[key].push(fn) // 订阅的消息添加进缓存列表\n  },\n  trigger: function() {\n    var key = Array.prototype.shift.call(arguments), // (1);\n      fns = this.clientList[key]\n\n    if (!fns || fns.length === 0) {\n      // 如果没有绑定对应的消息\n      return false\n    }\n    for (var i = 0, fn; (fn = fns[i++]); ) {\n      fn.apply(this, arguments) // (2) // arguments 是trigger时带上的参数\n    }\n  }\n}\n\nvar installEvent = function(obj) {\n  for (var i in event) {\n    obj[i] = event[i]\n  }\n}\n\n\n// usage\nvar salesOffices = {}\ninstallEvent(salesOffices)\n\n// 小明订阅消息\nsalesOffices.listen('squareMeter88', function(price) {\n  console.log('价格= ' + price)\n})\n\n// 小红订阅消息\nsalesOffices.listen('squareMeter100', function(price) {\n  console.log('价格= ' + price)\n})\n\nsalesOffices.trigger('squareMeter88', 2000000) // 输出：2000000\nsalesOffices.trigger('squareMeter100', 3000000) // 输出：3000000\n\n")])])]),t("h2",{attrs:{id:"命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 命令模式")]),n._v(" "),t("p",[n._v("命令模式中的命令（command）指的是一个执行某些特定事情的指令。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-6","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("解耦发送者和接收者间的耦合关系")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-5","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var MenuBar = {\n  refresh: function() {\n    console.log('刷新菜单界面')\n  }\n}\n\nvar RefreshMenuBarCommand = function(receiver) {\n  return {\n    execute: function() {\n      receiver.refresh()\n    }\n  }\n}\n\nvar setCommand = function(button, command) {\n  button.onclick = function() {\n    command.execute()\n  }\n}\n\nvar refreshMenuBarCommand = RefreshMenuBarCommand(MenuBar)\nsetCommand(button1, refreshMenuBarCommand)\n\n")])])]),t("h2",{attrs:{id:"组合模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 组合模式")]),n._v(" "),t("p",[n._v("组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构，其次可通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-7","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("文件系统管理")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-6","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/********** Folder **********/\nvar Folder = function(name) {\n  this.name = name;\n  this.files = []\n}\n\nFolder.prototype.add = function(file) {\n  this.files.push(file)\n}\n\nFolder.prototype.scan = function(){     \n  console.log( '开始扫描文件夹: ' + this.name );     \n  for ( var i = 0, file, files = this.files; file = files[ i++ ]; ){\n    file.scan()\n  }\n}\n\n/********** File **********/\nvar File = function(name) {\n  this.name = name\n}\n\nFile.prototype.add = function() {\n  throw new Error('文件下面不能再添加文件')\n}\n\nFile.prototype.scan = function() {\n  console.log('开始扫码文件: ',  this.name)\n}\n")])])]),t("h2",{attrs:{id:"模板方法模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 模板方法模式")]),n._v(" "),t("p",[n._v("通过定义一个基方法，并定义一些步骤让子类来实现")]),n._v(" "),t("h3",{attrs:{id:"常用场景-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-8","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("项目框架搭建")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-7","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Base() {}\nBase.prototype.do1= function() {}\n\n// ...省略其他方法\nBase.prototype.init = function() {\n\n  // 设置执行顺序\n  this.do1()\n  \n  // ...\n}\n\nVar S1 = function() {}\nS1.prototype = new Base()\nS1.prototype.do1 = function() {} // 重写父类方法\n\n// ...省略其他方法\n\nvar s1 = new S1()\ns1.init()\n")])])]),t("h2",{attrs:{id:"享元模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#享元模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 享元模式")]),n._v(" "),t("p",[n._v("把所有内部状态相同的对象指定为同一个对象，而外部对象可以从对象上剥离下来，储存在外部")]),n._v(" "),t("h3",{attrs:{id:"常用场景-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-9","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("多文件上传")]),n._v(" "),t("li",[n._v("对象池")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-8","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 设置享元对象\nvar Upload = function(uploadType) {\n  this.uploadType = uploadType\n}\n\nUpload.prototype.delFile = function( id ){     \n  uploadManager.setExternalState( id, this );  // (1)    \n  if ( this.fileSize < 3000 ){         \n    return this.dom.parentNode.removeChild( this.dom );    \n  }     \n  if ( window.confirm( '确定要删除该文件吗? ' + this.fileName ) ){         \n    return this.dom.parentNode.removeChild( this.dom );     \n  } \n};\n\nvar uploadManager = (function() {\n  var uploadDatabase = {}\n\n  return {\n    add: function(id, uploadType, fileName, fileSize) {\n      var flyWeightObj = UploadFactory.create(uploadType)\n      var dom = document.createElement('div')\n      dom.innerHTML =\n        '<span>文件名称:' +\n        fileName +\n        ', 文件大小: ' +\n        fileSize +\n        '</span>' +\n        '<button class=\"delFile\">删除</button>'\n      dom.querySelector('.delFile').onclick = function() {\n        flyWeightObj.delFile(id)\n      }\n      document.body.appendChild(dom)\n      uploadDatabase[id] = { fileName: fileName, fileSize: fileSize, dom: dom }\n      return flyWeightObj\n    },\n    setExternalState: function(id, flyWeightObj) {\n      var uploadData = uploadDatabase[id]\n      for (var i in uploadData) {\n        flyWeightObj[i] = uploadData[i]\n      }\n    }\n  }\n})()\n\nvar id = 0\nwindow.startUpload = function(uploadType, files) {\n  for (var i = 0, file; (file = files[i++]); ) {\n    var uploadObj = uploadManager.add(\n      ++id,\n      uploadType,\n      file.fileName,\n      file.fileSize\n    )\n  }\n}\n\n")])])]),t("h2",{attrs:{id:"职责链模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 职责链模式")]),n._v(" "),t("p",[n._v("职责链模式的定义是：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-10","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("商城抽奖系统")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-9","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var order500 = function(orderType, pay, stock) {\n  if(orderType === 1 && pay === true) {\n    console.log('500元定金预购，获得100元优惠券')\n  }else {\n    return 'nextSuccessor'\n  }\n}\n\nvar order200 = function(orderType, pay, stock) {\n  if(orderType === 2 && pay === true) {\n    console.log('200元定金预购，获得50元优惠券')\n  }else {\n    return 'nextSuccessor'\n  }\n}\n\nvar orderNormal = function(orderType, pay, stock) {\n  if(stock > 0) {\n    console.log('普通购买，无优惠券')\n  }else {\n    console.log('库存不足')\n  }\n}\n\nvar Chain = function(fn) {\n  this.fn = fn\n  this.successor = null\n}\nChain.prototype.setNextSuccessor = function( successor ){     \n  return this.successor = successor; \n}; \nChain.prototype.passRequest = function(){     \n  var ret = this.fn.apply( this, arguments );     \n  if ( ret === 'nextSuccessor' ){         \n    return this.successor && this.successor.passRequest.apply( this.successor, arguments );     \n  }     \n  return ret; \n};\n")])])]),t("h2",{attrs:{id:"中介者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 中介者模式")]),n._v(" "),t("p",[n._v("解除对象和对象之间的耦合关系，增加一个中介者对象，所有的相关对象都可以通过中介者对象来通信.")]),n._v(" "),t("h3",{attrs:{id:"常用场景-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-11","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("博彩系统")]),n._v(" "),t("li",[n._v("Vuex 状态树")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-10","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var goods = {\n  // 手机库存\n  'red|32G': 3,\n  'red|16G': 0,\n  'blue|32G': 1,\n  'blue|16G': 6\n}\nvar mediator = (function() {\n  var colorSelect = document.getElementById('colorSelect'),\n    memorySelect = document.getElementById('memorySelect'),\n    numberInput = document.getElementById('numberInput'),\n    colorInfo = document.getElementById('colorInfo'),\n    memoryInfo = document.getElementById('memoryInfo'),\n    numberInfo = document.getElementById('numberInfo'),\n    nextBtn = document.getElementById('nextBtn')\n  return {\n    changed: function(obj) {\n      var color = colorSelect.value, // 颜色\n        memory = memorySelect.value, // 内存\n        number = numberInput.value, // 数量\n        stock = goods[color + '|' + memory] // 颜色和内存对应的手机库存数量\n      if (obj === colorSelect) {\n        // 如果改变的是选择颜色下拉框\n        colorInfo.innerHTML = color\n      } else if (obj === memorySelect) {\n        memoryInfo.innerHTML = memory\n      } else if (obj === numberInput) {\n        numberInfo.innerHTML = number\n      }\n      if (!color) {\n        nextBtn.disabled = true\n        nextBtn.innerHTML = '请选择手机颜色'\n        return\n      }\n      if (!memory) {\n        nextBtn.disabled = true\n        nextBtn.innerHTML = '请选择内存大小'\n        return\n      }\n      if (((number - 0) | 0) !== number - 0) {\n        // 输入购买数量是否为正整数\n        nextBtn.disabled = true\n\n        nextBtn.innerHTML = '请输入正确的购买数量'\n        return\n      }\n      nextBtn.disabled = false\n      nextBtn.innerHTML = '放入购物车'\n    }\n  }\n})()\n// 事件函数：\ncolorSelect.onchange = function() {\n  mediator.changed(this)\n}\nmemorySelect.onchange = function() {\n  mediator.changed(this)\n}\nnumberInput.oninput = function() {\n  mediator.changed(this)\n}\n\n")])])]),t("h3",{attrs:{id:"note"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[n._v("#")]),n._v(" Note")]),n._v(" "),t("blockquote",[t("p",[n._v("中介者模式与发布-订阅模式是存在区别的。"),t("br"),n._v(" "),t("code",[n._v("中介者模式")]),n._v(": 对象间互相通信，但通过中间对象来通信"),t("br"),n._v(" "),t("code",[n._v("发布-订阅模式")]),n._v(": 对象间不通信，中间对象对普通对象发送信息。")])]),n._v(" "),t("h2",{attrs:{id:"装饰者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 装饰者模式")]),n._v(" "),t("p",[n._v("不改变对象自身的基础上，在程序运行期间给对象动态的添加职能")]),n._v(" "),t("h3",{attrs:{id:"常用场景-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-12","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("修饰器（Decorator）")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-11","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('Function.prototype.before = function(beforefn) {\n  var __self = this // 保存原函数的引用\n  return function() {\n    // 返回包含了原函数和新函数的"代理"函数\n    beforefn.apply(this, arguments) // 执行新函数，且保证this不被劫持，新函数接受的参数 // 也会被原封不动地传入原函数，新函数在原函数之前执行\n    return __self.apply(this, arguments) // 执行原函数并返回原函数的执行结果， // 并且保证this不被劫持\n  }\n}\n\nFunction.prototype.after = function(afterfn) {\n  var __self = this\n  return function() {\n    var ret = __self.apply(this, arguments)\n    afterfn.apply(this, arguments)\n    return ret\n  }\n}\n')])])]),t("h2",{attrs:{id:"状态模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 状态模式")]),n._v(" "),t("p",[n._v("状态模式的关键是区分事物内部的状态，事物内部状态的改变往往会带来事物的行为改变。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-13","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("文件上传")]),n._v(" "),t("li",[n._v("Promise中的状态"),t("code",[n._v("Fulfilled")]),n._v(", "),t("code",[n._v("Rejected")]),n._v(", "),t("code",[n._v("Pending")])]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-12","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Light = function() {\n  this.offLightState = new OffLightState(this) // 持有状态对象的引用\n  this.weakLightState = new WeakLightState(this)\n  this.strongLightState = new StrongLightState(this)\n  this.superStrongLightState = new SuperStrongLightState(this)\n  this.button = null\n}\n\nLight.prototype.init = function() {\n  var button = document.createElement('button'),\n    self = this\n  this.button = document.body.appendChild(button)\n  this.button.innerHTML = '开关'\n  this.currState = this.offLightState // 设置默认初始状态\n  this.button.onclick = function() {\n    // 定义用户的请求动作\n    self.currState.buttonWasPressed()\n  }\n}\n")])])]),t("h2",{attrs:{id:"适配器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 适配器模式")]),n._v(" "),t("p",[n._v("适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。")]),n._v(" "),t("h3",{attrs:{id:"常用场景-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用场景-14","aria-hidden":"true"}},[n._v("#")]),n._v(" 常用场景")]),n._v(" "),t("ul",[t("li",[n._v("XML-JSON适配器")]),n._v(" "),t("li",[n._v("多地图兼容")]),n._v(" "),t("li",[n._v("更多...")])]),n._v(" "),t("h3",{attrs:{id:"👉-解决方案-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#👉-解决方案-13","aria-hidden":"true"}},[n._v("#")]),n._v(" 👉 解决方案")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var googleMap = {\n  show: function() {\n    console.log('开始渲染谷歌地图')\n  }\n}\nvar baiduMap = {\n  display: function() {\n    console.log('开始渲染百度地图')\n  }\n}\nvar baiduMapAdapter = {\n  show: function() {\n    return baiduMap.display()\n  }\n}\nrenderMap(googleMap) // 输出：开始渲染谷歌地图\nrenderMap(baiduMapAdapter) // 输出：开始渲染百度地图\n")])])]),t("Valine")],1)}),[],!1,null,null,null);e.default=r.exports}}]);