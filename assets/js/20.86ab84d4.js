(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{301:function(e,t,r){"use strict";r.r(t);var s=r(9),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"手写-promise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手写-promise","aria-hidden":"true"}},[e._v("#")]),e._v(" 手写 Promise")]),e._v(" "),r("p",[e._v("Promise 源自 ES6，异步处理函数，是目前比较流行的 JavaScript 异步编程解决方案之一")]),e._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[r("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"promises-a-规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promises-a-规范","aria-hidden":"true"}},[e._v("#")]),e._v(" Promises/A+ 规范")]),e._v(" "),r("blockquote",[r("p",[e._v("为实现者提供一个健全的、可互操作的 JavaScript Promise 的开放标准。")])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5c4b0423e51d4525211c0fbc",target:"_blank",rel:"noopener noreferrer"}},[e._v("译文"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"开发准备"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发准备","aria-hidden":"true"}},[e._v("#")]),e._v(" 开发准备")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("状态"),r("br"),e._v("\nPromise 存在 3 种状态， 等待状态(PENDING)，执行状态(FULFILLED), 拒绝状态(REJECTED)")])]),e._v(" "),r("li",[r("p",[e._v("Promise 类私有属性")]),e._v(" "),r("ul",[r("li",[e._v("_state 用于存储状态")]),e._v(" "),r("li",[e._v("_value 用于储存执行状态(FULFILLED)中不可变的值")]),e._v(" "),r("li",[e._v("_reason 用于储存拒绝状态(REJECTED)中不可变的值")]),e._v(" "),r("li",[e._v("_onResolvedQueues 用于存储成功回调的函数")]),e._v(" "),r("li",[e._v("_onRejectedQueues 用于存储失败回调的函数")])])]),e._v(" "),r("li",[r("p",[e._v("示例解析")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve(1)\n    })\n}).then(res => {\n    console.log(res)\n}, err => {\n    console.log(err)\n})\n")])])]),r("ol",[r("li",[r("code",[e._v("Promise")]),e._v(" 是一个构造函数，需要 "),r("code",[e._v("new")]),e._v(" 去生成一个新实例，函数参数是一个函数")]),e._v(" "),r("li",[e._v("拥有 "),r("code",[e._v("then")]),e._v(" 方法，"),r("code",[e._v("then")]),e._v(" 方法参数是一个函数")])]),e._v(" "),r("h2",{attrs:{id:"开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发","aria-hidden":"true"}},[e._v("#")]),e._v(" 开发")]),e._v(" "),r("h3",{attrs:{id:"声明状态常量并创建一个简易的-promise-类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明状态常量并创建一个简易的-promise-类","aria-hidden":"true"}},[e._v("#")]),e._v(" 声明状态常量并创建一个简易的 Promise 类")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('const PENDING = "PENDING";\nconst FULFILLED = "FULFILLED";\nconst REJECTED = "REJECTED";\n\nclass Promise {\n  constructor(executor) {\n    this._state = PENDING;\n    this._value = undefined;\n    thhis._reason = undefined;\n    this._onResolvedQueues = [];\n    this._onRejectedQueues = [];\n\n    const resolve = value => {\n        if (this._state === PENDING) {\n          this._state = FULFILLED;\n          this._value = value;\n          this._onResolvedQueues.forEach(fn => fn());\n        }\n      },\n      reject = reason => {\n        if (this._reason === PENDING) {\n          this._state = REJECTED;\n          this._reason = reason;\n          this._onRejectedQueues.forEach(fn => fn());\n        }\n      };\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n}\n')])])]),r("p",[e._v("调用 下面代码")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("new Promsie((resolve, reject) => {\n    // 省略...\n    resolve()\n}),\n")])])]),r("p",[e._v("即相当于执行"),r("code",[e._v("resolve()")]),e._v(" 部分")]),e._v(" "),r("h3",{attrs:{id:"开发-then-方法，then-方法参数为-onfulfilled-和-onrejected-2-个函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发-then-方法，then-方法参数为-onfulfilled-和-onrejected-2-个函数","aria-hidden":"true"}},[e._v("#")]),e._v(" 开发 then 方法，then 方法参数为 onFulfilled 和 onRejected 2 个函数")]),e._v(" "),r("ul",[r("li",[e._v("起步阶段")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" // 声明 isFunction\nfunction isFunction(fn) {\n    return typeof fn === 'function'\n}\n\n// Promise 类中public方法\nthen(onFulfilled, onRejected) {\n    // 先判断onFulfilled 和 onReject 是否为函数，非函数转成相应函数\n    onFulfilled = isFunction(onFulfilled) ? onFulfilled : value => value\n    onRejected = isFunction(onRejected)\n        ? onRejected\n        : err => {\n            throw err\n        }\n\n    // 创建一个新的Promise实例，并返回它\n    let promise = new Promise((resolve, reject) => {\n        // TODO:省略关键代码\n    })\n\n    return promise\n}\n")])])]),r("div",{staticClass:"tip custom-block"},[r("p",[e._v("“创建新的 Promise 实例，并返回” - 用于形成链式调用，即 "),r("code",[e._v("new Promsie().then().then(). ... (省略函数参数)")])])]),e._v(" "),r("ul",[r("li",[e._v("处理新的 Promise 实例 传参函数\n根据 Promise 实例的 state 状态，执行相应函数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("if (this._state === FULFILLED) {\n  setTimeout(() => {\n    try {\n      let result = onFulfilled(this._value);\n      // TODO:省略resolvePromise\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nif (this._state === REJECTED) {\n  setTimeout(() => {\n    try {\n      let result = onRejected(this._reason);\n      // TODO:省略resolvePromise\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nif (this._state === PENDING) {\n  this._onResolvedQueues.push(() => {\n    setTimeout(() => {\n      try {\n        let result = onFulfilled(this._value);\n        // TODO:省略resolvePromise\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n  this._onRejectedQueues.push(() => {\n    setTimeout(() => {\n      try {\n        let result = onRejected(this._reason);\n        // TODO:省略resolvePromise\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n}\n\n")])])]),r("div",{staticClass:"tip custom-block"},[r("ol",[r("li",[e._v("setTimeout 是为了保证执行函数是异步执行")]),e._v(" "),r("li",[e._v("FULFILLED(执行状态)和 REJECTED(拒绝状态）则直接运行函数")]),e._v(" "),r("li",[e._v("PENDING(等待状态) 分别收集 FULFILLED(执行状态)和 REJECTED(拒绝状态）的执行栈")])])]),e._v(" "),r("div",{staticClass:"danger custom-block"},[r("p",[e._v("resolvePromise 函数用于处理新的实例(promise)与“父实例”处理结果(result)之间的关系")])]),e._v(" "),r("ul",[r("li",[e._v("处理 resolvePromise 函数，参数包含新的实例(promise), 父实例处理结果(result), resolve 函数，reject 函数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 调用resolvePromise\nresolvePromsie(promise, result, resolve, reject)\n")])])]),r("p",[e._v("resolvePromise 代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 声明isObject\nfunction isObject(obj) {\n    return typeof obj === 'object'\n}\n// Promise 类私有方法\n_resolvePromsie(promise, result, resolve, reject) {\n    if (promise === result) {\n      return reject(new TypeError('Chaining cycle detected for promise'))\n    }\n\n    let isExecuted = false\n    if (result !== null && (isFunction(result) || isObject(result))) {\n      try {\n        let then = result.then\n        if (isFunction(then)) {\n          then.call(\n            result,\n            value => {\n              if (isExecuted) return\n              isExecuted = true\n              this._resolvePromsie(promise, value, resolve, reject)\n            },\n            err => {\n              if (isExecuted) return\n              isExecuted = true\n              reject(err)\n            }\n          )\n        } else {\n          resolve(result)\n        }\n      } catch (err) {\n        if (isExecuted) return\n        isExecuted = true\n        reject(err)\n      }\n    } else {\n      resolve(result)\n    }\n  }\n")])])]),r("div",{staticClass:"tip custom-block"},[r("ol",[r("li",[e._v("判断 result 和 promise 是否相等，防止循环引用")]),e._v(" "),r("li",[e._v("isExecuted 用于保证 当前 promise 未被调用")])])]),e._v(" "),r("h3",{attrs:{id:"补充-promise-其他方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#补充-promise-其他方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 补充 Promise 其他方法")]),e._v(" "),r("p",[e._v("其他方法已不需要额外特别开发，通过调用现有方法即可完成，故在此仅贴出代码。")]),e._v(" "),r("ul",[r("li",[e._v("catch")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("catch(fn) {\n    return this.then(null, fn)\n}\n")])])]),r("ul",[r("li",[e._v("Promise.resolve 与 Promise.reject")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("static resolve(value) {\n    return new Promise((resolve, reject) => {\n        resolve(value)\n    })\n}\nstatic reject(err) {\n    return new Promise((resolve, reject) => {\n        reject(err)\n    })\n}\n")])])]),r("ul",[r("li",[e._v("Promise.all")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("static all(promises) {\n  let arr = []\n  let i = 0\n  function processData(index, data) {\n    arr[index] = data\n    i++\n    if (i == promises.length) {\n      resolve(arr)\n    }\n  }\n  return new Promise((resolve, reject) => {\n    for (let i = 0; i < promises.length; i++) {\n      promises[i].then(data => {\n        processData(i, data)\n      }, reject)\n    }\n  })\n}\n")])])]),r("ul",[r("li",[e._v("Promise.race")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("static race(promises) {\n  return new Promise((resolve, reject) => {\n    for (let i = 0; i < promises.length; i++) {\n      promises[i].then(resolve, reject)\n    }\n  })\n}\n")])])]),r("h2",{attrs:{id:"测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试","aria-hidden":"true"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),r("p",[e._v("可以通过 promises-aplus-tests 来测试 promise 是否满足 Promises/A+ 规范")]),e._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://github.com/promises-aplus/promises-tests#readme",target:"_blank",rel:"noopener noreferrer"}},[e._v("promises-aplus-tests"),r("OutboundLink")],1)])]),e._v(" "),r("div",{staticClass:"danger custom-block"},[r("p",[e._v("全局安装 promises-aplus-tests 后，在文件添加如下代码, 然后执行 promises-aplus-tests + 文件名")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//promise的语法糖\nPromise.defer=Promise.deferred=function(){\n    let dfd={};\n    dfd.promise=new Promise((resolve,reject)=>{\n        dfd.resolve=resolve;\n        dfd.reject=reject;\n    })\n    return dfd;\n}\n")])])]),r("h2",{attrs:{id:"参考文献"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文献","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promises/A+"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/Yangfan2016",target:"_blank",rel:"noopener noreferrer"}},[e._v("Yangfan2016"),r("OutboundLink")],1),e._v(" -"),r("a",{attrs:{href:"https://juejin.im/post/5c4b0423e51d4525211c0fbc",target:"_blank",rel:"noopener noreferrer"}},[e._v("【译】 Promises/A+ 规范"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/user/5b2c66b36fb9a00e406a943f",target:"_blank",rel:"noopener noreferrer"}},[e._v("afan"),r("OutboundLink")],1),e._v(" - "),r("a",{attrs:{href:"https://juejin.im/post/5b5ad5755188251ad06b735c#heading-5",target:"_blank",rel:"noopener noreferrer"}},[e._v("根据 Promises/A+规范 手写 Promsie"),r("OutboundLink")],1)])]),e._v(" "),r("blockquote",[r("p",[e._v("代码仓库\n"),r("a",{attrs:{href:"https://github.com/sillyY/promise",target:"_blank",rel:"noopener noreferrer"}},[e._v("promise"),r("OutboundLink")],1)])]),e._v(" "),r("Valine")],1)}),[],!1,null,null,null);t.default=n.exports}}]);